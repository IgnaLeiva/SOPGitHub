[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pharmacoepidemiology GitHub",
    "section": "",
    "text": "This is an extension of the PhEpi-1-05_Reproduzierbares Arbeiten SOP",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#purposeobjective",
    "href": "index.html#purposeobjective",
    "title": "Pharmacoepidemiology GitHub",
    "section": "Purpose/Objective",
    "text": "Purpose/Objective\nThe Pharmacoepidemiology (PhEpi) unit relies on effective data management, thorough data analysis, and creating outputs such as plots, tables, and PDF documents as critical components of project development. In this context, a Version Control System (VCS) plays a pivotal role. A VCS facilitates tracking and managing changes made to the project over time, encompassing any modification to folders, files, and code. This capability empowers teams to work more efficiently and intelligently, ensuring a streamlined and collaborative development process.\nAdding to these core principles, platforms like GitHub become potent extensions of remote VCS. GitHub, a widely embraced web-based hosting service, fosters seamless collaboration among multiple team members within a project. Its user-friendly interface and robust features enhance workflow efficiency, making teamwork a breeze.\nGiven these advantages, this document lays out the framework for acquiring basic knowledge and setting up an account to join the Pharmacoepidemiology GitHub (PhEpiGit).",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#scopeapplication",
    "href": "index.html#scopeapplication",
    "title": "Pharmacoepidemiology GitHub",
    "section": "Scope/Application",
    "text": "Scope/Application\nThis extension of the standard operating procedure (SOP) on Reproducible Research applies to all PhEpi employees working on and collaborating on a project hosted on the organizational GitHub.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#responsibility",
    "href": "index.html#responsibility",
    "title": "Pharmacoepidemiology GitHub",
    "section": "Responsibility",
    "text": "Responsibility\nEach repository must be systematically organised by a member responsible for a specific project. This member is also responsible for accepting collaborations on their projects. Only PhEpi-related projects are eligible to be hosted on PhEpiGit.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "content/definitions.html",
    "href": "content/definitions.html",
    "title": "Terms, definitions and abbreviation",
    "section": "",
    "text": "Term\nDefinition\n\n\n\n\nCollaboration\nShared project or technical/expertise support provided to other researchers.\n\n\nCommit\nInvolves saving changes made in your local repository. Each commit represents a snapshot of the project at specific point in time.\n\n\nGitHub\nA web-based interface that uses Git for version control\n\n\nPhEpi\nPharmacoepidemiology unit\n\n\nPhEpiGit\nPharmacoepidemiology unit GitHub\n\n\nRepository\nCentralized storage space that holds a project’s files and their complete history (track changes)\n\n\nR projects\nStructured environment created within the integrated development environment (IDE). It includes a dedicated project directory, a “.Rproj” configuration file, and isolated settings.\n\n\nSOP\nStandard operating procedure\n\n\nPushing\nRefers to sending committed (saved) changes from your local repository to a remote repository (GitHub).\n\n\nVCS\nVersion Control System. A VCS facilitates the tracking and managing of changes made to the project over time, encompassing any modification to folders, files, and code.",
    "crumbs": [
      "Terms, definitions and abbreviation"
    ]
  },
  {
    "objectID": "content/commit_push_main.html",
    "href": "content/commit_push_main.html",
    "title": "Committing and Pushing to/from the origin/main Branch",
    "section": "",
    "text": "Committing saves all your new work or changes made to a local repository. Figure 1 shows how to commit changes using the Rstudio Git tab.\nStarts by:\n\nGo to the Git tab -A-. The window shows all new files or those with modifications\nSelect the files to be committed by checking the boxes -B-.\nClick Commit to open the review changes window (the review window also allows file selection or deselection)-C-.\n\n\n\n\n\n\n\nFigure 1: Git windows showing added or modified files.\n\n\n\nNote: Committing changes can also be done from a branch different to main/origin, as described check in Section 5.6. Commit and push– new branch\nThe review window (Figure 2) displays changes and the repository/project history. Once files are selected (checked boxes), -A-. add a brief commit message indicating the change. Finally, click Commit to complete the process.\n\n\n\n\n\n\nFigure 2: Review window.\n\n\n\nAfter clicking Commit (Figure 2), a window pops up indicating the state of the commit. Figure 3 provides a summary of the changes made in the commit process.\n\n\n\n\n\n\nFigure 3: Git Commit window describing the commit changes.",
    "crumbs": [
      "Committing and Pushing - origin/main Branch"
    ]
  },
  {
    "objectID": "content/commit_push_main.html#committing",
    "href": "content/commit_push_main.html#committing",
    "title": "Committing and Pushing to/from the origin/main Branch",
    "section": "",
    "text": "Committing saves all your new work or changes made to a local repository. Figure 1 shows how to commit changes using the Rstudio Git tab.\nStarts by:\n\nGo to the Git tab -A-. The window shows all new files or those with modifications\nSelect the files to be committed by checking the boxes -B-.\nClick Commit to open the review changes window (the review window also allows file selection or deselection)-C-.\n\n\n\n\n\n\n\nFigure 1: Git windows showing added or modified files.\n\n\n\nNote: Committing changes can also be done from a branch different to main/origin, as described check in Section 5.6. Commit and push– new branch\nThe review window (Figure 2) displays changes and the repository/project history. Once files are selected (checked boxes), -A-. add a brief commit message indicating the change. Finally, click Commit to complete the process.\n\n\n\n\n\n\nFigure 2: Review window.\n\n\n\nAfter clicking Commit (Figure 2), a window pops up indicating the state of the commit. Figure 3 provides a summary of the changes made in the commit process.\n\n\n\n\n\n\nFigure 3: Git Commit window describing the commit changes.",
    "crumbs": [
      "Committing and Pushing - origin/main Branch"
    ]
  },
  {
    "objectID": "content/commit_push_main.html#pushing",
    "href": "content/commit_push_main.html#pushing",
    "title": "Committing and Pushing to/from the origin/main Branch",
    "section": "Pushing",
    "text": "Pushing\nWhen pushing you will send all changes made to the GitHub repository. As depicted in Figure 4:\n\nOnce in the Git tab -A-. you will see a message indicating that the local repository is ahead of the remote one (GitHub)-B-. . Please, note that you are using the main/origin branch.\nClick Push to initiate the pushing process -C-. Provide GitHub identification when prompted. Just like the commit process, clicking the push button brings up a Git Push window providing the information related to this action.\n\n\n\n\n\n\n\nFigure 4: Git tab on RStudio ready to push data to the main/origin branch.",
    "crumbs": [
      "Committing and Pushing - origin/main Branch"
    ]
  },
  {
    "objectID": "content/rendering.html",
    "href": "content/rendering.html",
    "title": "Rendering",
    "section": "",
    "text": "The repo includes a GitHub Action that will render (build) the website automatically when you make changes to the files. It will be pushed to the gh-pages branch.\nBut when you are developing your content, you will want to render it locally."
  },
  {
    "objectID": "content/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "href": "content/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "title": "Rendering",
    "section": "Step 1. Make sure you have a recent RStudio",
    "text": "Step 1. Make sure you have a recent RStudio\nHave you updated RStudio since about August 2022? No? Then update to a newer version of RStudio. In general, you want to keep RStudio updated and it is required to have a recent version to use Quarto."
  },
  {
    "objectID": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "href": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "title": "Rendering",
    "section": "Step 2. Clone and create RStudio project",
    "text": "Step 2. Clone and create RStudio project\nFirst, clone the repo onto your local computer. How? You can click File &gt; New Project and then select “Version Control”. Paste in the url of the repository. That will clone the repo on to your local computer. When you make changes, you will need to push those up."
  },
  {
    "objectID": "content/rendering.html#step-3.-render-within-rstudio",
    "href": "content/rendering.html#step-3.-render-within-rstudio",
    "title": "Rendering",
    "section": "Step 3. Render within RStudio",
    "text": "Step 3. Render within RStudio\nRStudio will recognize that this is a Quarto project by the presence of the _quarto.yml file and will see the “Build” tab. Click the “Render website” button to render to the _site folder.\nPreviewing: You can either click index.html in the _site folder and specify “preview in browser” or set up RStudio to preview to the viewer panel. To do the latter, go to Tools &gt; Global Options &gt; R Markdown. Then select “Show output preview in: Viewer panel”."
  },
  {
    "objectID": "content/code.html",
    "href": "content/code.html",
    "title": "Rendering with Code",
    "section": "",
    "text": "You can have code (R, Python or Julia) in your qmd file. You will need to have these installed on your local computer, but presumably you do already if you are adding code to your qmd files.\nx &lt;- c(5, 15, 25, 35, 45, 55)\ny &lt;- c(5, 20, 14, 32, 22, 38)\nlm(x ~ y)\n\n\nCall:\nlm(formula = x ~ y)\n\nCoefficients:\n(Intercept)            y  \n      1.056        1.326"
  },
  {
    "objectID": "content/code.html#modify-the-github-action",
    "href": "content/code.html#modify-the-github-action",
    "title": "Rendering with Code",
    "section": "Modify the GitHub Action",
    "text": "Modify the GitHub Action\nYou will need to change the GitHub Action in .github/workflows to install these and any needed packages in order for GitHub to be able to render your webpage. The GitHub Action install R since I used that in code.qmd. If you use Python or Julia instead, then you will need to update the GitHub Action to install those.\nIf getting the GitHub Action to work is too much hassle (and that definitely happens), you can alway render locally and publish to the gh-pages branch. If you do this, make sure to delete or rename the GitHub Action to something like\nrender-and-publish.old_yml\nso GitHub does not keep trying to run it. Nothing bad will happen if you don’t do this, but if you are not using the action (because it keeps failing), then you don’t need GitHub to run it."
  },
  {
    "objectID": "content/code.html#render-locally-and-publish-to-gh-pages-branch",
    "href": "content/code.html#render-locally-and-publish-to-gh-pages-branch",
    "title": "Rendering with Code",
    "section": "Render locally and publish to gh-pages branch",
    "text": "Render locally and publish to gh-pages branch\nTo render locally and push up to the gh-pages branch, open a terminal window and then cd to the directory with the Quarto project. Type this in the terminal:\nquarto render gh-pages"
  },
  {
    "objectID": "content/become_part.html",
    "href": "content/become_part.html",
    "title": "Joining the PhEpiGit Community",
    "section": "",
    "text": "Figure 1 provides a detailed overview of the journey from setting up Git to becoming a member of PhEpiGit. The process starts by configuring Git on your local machine or R server, ensuring you use your UKHD email as the user email. If you have not created a GitHub account yet, now is the time! Simply set one up and make sure to include your UKHD email in the account setting to match Git’s user email.\nOnce that’s sorted, email the PhEpiGit owner, kindly requesting an invitation. Remember to include your GitHub username. Upon receiving your email, the owner will promptly send an invitation granting membership to the PhEpiGit\n\n\n\n\n\n\nFigure 1: Workflow diagram depicting the process from configuring Git to becoming a member of PhEpiGit.\n\n\n\n(*) Configuration on the local machine can be done by using the following code in a terminal (e.g., RStudio terminal)\n\n# global configuration of name and email address\ngit config --global user.name \"First Last\"\ngit config --global user.email \"name.surname@med.uni-heidelberg.de\"",
    "crumbs": [
      "Joining the PhEpiGit"
    ]
  },
  {
    "objectID": "content/newbranchcommit.html",
    "href": "content/newbranchcommit.html",
    "title": "Committing and Pushing to/from new Branch",
    "section": "",
    "text": "Follow the instructions in section 5.4 to commit and push a piece of work to/from a new (side) branch of an existing repository/project. The additional step is to open a pull request on PhEpiGit. A pull request enables to communicate to others, especially the repository owner, which files/code/data are ready to be merged from a side branch to the main/origin branch. A pull request can be opened after pushing a piece of work to a side branch. Once the work has been pushed, go to PhEpiGit and locate the repository being collaborated on. Click main to switch to the member branch (Figure 1).\n\n\n\n\n\n\nFigure 1: Switching branches in a GitHub repository.\n\n\n\nOnce on the selected branch, as shown in Figure 2, click (A) the Contribute button to (B) Open a pull request. A window pops up where a title and description for the request can be provided. After submitting the request, the repository owner can check and accept the collaborator’s work.\n\n\n\n\n\n\nFigure 2: Open a pull request for a GitHub repository branch.",
    "crumbs": [
      "Committing and Pushing – new Branch"
    ]
  },
  {
    "objectID": "content/publishing.html",
    "href": "content/publishing.html",
    "title": "Publishing",
    "section": "",
    "text": "To get your Quarto webpage to show up with the url\nyou have a few steps."
  },
  {
    "objectID": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "href": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "title": "Publishing",
    "section": "Turn on GitHub Pages for your repo",
    "text": "Turn on GitHub Pages for your repo\n\nTurn on GitHub Pages under Settings &gt; Pages . You will set pages to be made from the gh-pages branch and the root directory.\nTurn on GitHub Actions under Settings &gt; Actions &gt; General\n\nThe GitHub Action will automatically recreate your website when you push to GitHub after you do the initial gh-pages set-up"
  },
  {
    "objectID": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "href": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "title": "Publishing",
    "section": "Do your first publish to gh-pages",
    "text": "Do your first publish to gh-pages\nThe first time you publish to gh-pages, you need to do so locally.\n\nOn your local computer, open a terminal window and cd to your repo directory. Here is what that cd command looks like for me. You command will look different because your local repo will be somewhere else on your computer.\n\ncd ~/Documents/GitHub/NOAA-quarto-simple\n\nPublish to the gh-pages. In the terminal type\n\nquarto publish gh-pages\nThis is going to render your webpage and then push the _site contents to the gh-pages branch."
  },
  {
    "objectID": "content/publishing.html#dont-like-using-gh-pages",
    "href": "content/publishing.html#dont-like-using-gh-pages",
    "title": "Publishing",
    "section": "Don’t like using gh-pages?",
    "text": "Don’t like using gh-pages?\nIn some cases, you don’t want your website on the gh-pages branch. For example, if you are creating releases and you want the website pages archived in that release, then you won’t want your website pages on the gh-pages branch.\nHere are the changes you need to make if you to avoid gh-pages branch.\n\nAt the top of _quarto.yml add the following:\n\nproject: \n  type: website\n  output-dir: docs\n\nOn GitHub under Settings &gt; Pages set pages to be made from the main branch and the docs directory.\nMake sure docs is not listed in .gitignore\nPublish the site the first time locally using quarto publish from the terminal\nChange the GitHub Action because you can’t use quarto publish gh-pages. You’ll need to push to the main branch yourself (in the GitHub Action)\n\non:\n  push:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2 \n        \n      - name: Set up R (needed for Rmd)\n        uses: r-lib/actions/setup-r@v2\n\n      - name: Install packages (needed for Rmd)\n        run: Rscript -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"jsonlite\"))'\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          # tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      - name: Render Quarto Project\n        uses: quarto-dev/quarto-actions/render@v2\n        with:\n          to: html\n\n      - name: Set up Git\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n\n      - name: Commit all changes and push\n        run: |\n          git add -A && git commit -m 'Build site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\""
  },
  {
    "objectID": "content/clon_git.html",
    "href": "content/clon_git.html",
    "title": "Cloning an existing repository from GitHub",
    "section": "",
    "text": "Cloning an existing repository is essential for collaboration among PhEpiGit members. To get started, members should go to the specific PhEpiGit repository and follow the instructions outlined in Section Cloning GitHub Repositories to Your Local Machine.\nBefore diving into work, collaborators must create their own branch. This can be done by navigating to the Git tab (Figure 1 Panel 1. A) and clicking on New Branch (Figure 1 Panel 1. B). A window will pop up where the employee’s UKHD name abbreviation (Kürzel)(e.g., New employee: NEmp) should be assigned to the branch name. Make sure to check Sync branch with remote to create the branch effectively. This action automatically switches the branch from main/origin to NEmp (Figure 1).\n\n\n\n\n\n\nFigure 1: Git tab on RStudio showing the change of branch.\n\n\n\nNote: External collaborators can also be invited to work on your project However, you need to include their username/email using the Collaborators and Teams option in the GitHub repository settings.\nBranches facilitate parallel development and experimentation by providing isolated environments for new features or issue resolution, preventing interference with the main codebase until changes are finalized. Work done in a branch will not impact the main branch until it’s merged, which typically happens after review, testing, and approval.",
    "crumbs": [
      "Cloning an existing repository from GitHub"
    ]
  },
  {
    "objectID": "content/copy_repo.html",
    "href": "content/copy_repo.html",
    "title": "Cloning GitHub Repositories to Your Local Machine",
    "section": "",
    "text": "This process starts by:\n\nAs shown in Figure 1, -A- Click Code to display a window containing options for cloning the repository. -B- Copy the HTTPS link provided. The subsequent step involves adding the new repository to your local machine.\n\n\n\n\n\n\n\nFigure 1: Options to clone the repository.\n\n\n\n\n\nLog-in into your R Server and access the RStudio menu bar, choose File \\(\\rightarrow\\) New Project \\(\\rightarrow\\) Version Control \\(\\rightarrow\\) Git. This displays the window depicted in Figure 4. There, -A- insert the copied HTTPS link, -B- name the project, and -C- select a location for saving the local repository.\n\n\n\n\n\n\n\nFigure 2: Git window to clone the GitHub repository.\n\n\n\n\nAfter clicking the Create Project (Figure 4), a window pops up (Figure 3) requesting the -A- GitHub username and -B- password. Keep in mind that instead of using a password, you’ll need to provide a Token.\n\n\n\n\n\n\nFigure 3: Git credential windows to clone the GitHub repository.\n\n\n\nFigure 4 showcases the cloned local repository. Note that this process generates a local .Rproj file -A-.\n\n\n\n\n\n\nFigure 4: The “Files” tab in RStudio displays the repository files along with the essential .Rproj file (R project).",
    "crumbs": [
      "Cloning GitHub Repositories to Your Local Machine"
    ]
  },
  {
    "objectID": "content/customizing.html",
    "href": "content/customizing.html",
    "title": "Customization",
    "section": "",
    "text": "Quarto allow many bells and whistles to make nice output. Read the documentation here Quarto documentation."
  },
  {
    "objectID": "content/customizing.html#quarto-documentation",
    "href": "content/customizing.html#quarto-documentation",
    "title": "Customization",
    "section": "",
    "text": "Quarto allow many bells and whistles to make nice output. Read the documentation here Quarto documentation."
  },
  {
    "objectID": "content/customizing.html#examples",
    "href": "content/customizing.html#examples",
    "title": "Customization",
    "section": "Examples",
    "text": "Examples\nLooking at other people’s Quarto code is a great way to figure out how to do stuff. Most will have a link to a GitHub repo where you can see the raw code. Look for a link to edit page or see source code. This will usually be on the right. Or look for the GitHub icon somewhere.\n\nQuarto gallery\nnmfs-openscapes\nFaye lab manual\nquarto-titlepages Note the link to edit is broken. Go to repo and look in documentation directory."
  },
  {
    "objectID": "content/rmarkdown.html",
    "href": "content/rmarkdown.html",
    "title": "R Markdown",
    "section": "",
    "text": "You can include R Markdown files in your project."
  },
  {
    "objectID": "content/rmarkdown.html#r-markdown",
    "href": "content/rmarkdown.html#r-markdown",
    "title": "R Markdown",
    "section": "R Markdown",
    "text": "R Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "content/rmarkdown.html#including-plots",
    "href": "content/rmarkdown.html#including-plots",
    "title": "R Markdown",
    "section": "Including Plots",
    "text": "Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot."
  },
  {
    "objectID": "content/acknowledgements.html",
    "href": "content/acknowledgements.html",
    "title": "Acknowledgments",
    "section": "",
    "text": "This repo and GitHub Action was based on the tutorial by Openscapes quarto-website-tutorial by Julia Lowndes and Stefanie Butland."
  },
  {
    "objectID": "content/add-content.html",
    "href": "content/add-content.html",
    "title": "Customize",
    "section": "",
    "text": "Edit the qmd or md files in the content folder. qmd files can include code (R, Python, Julia) and lots of Quarto markdown bells and whistles (like call-outs, cross-references, auto-citations and much more).\nEach page should start with\n---\ntitle: your title\n---\nand the first header will be the 2nd level, so ##. Note, there are situations where you leave off\n---\ntitle: your title\n---\nand start the qmd file with a level header #, but if using the default title yaml (in the --- fence) is a good habit since it makes it easy for Quarto convert your qmd file to other formats (like into a presentation)."
  },
  {
    "objectID": "content/add-content.html#edit-and-add-your-pages",
    "href": "content/add-content.html#edit-and-add-your-pages",
    "title": "Customize",
    "section": "",
    "text": "Edit the qmd or md files in the content folder. qmd files can include code (R, Python, Julia) and lots of Quarto markdown bells and whistles (like call-outs, cross-references, auto-citations and much more).\nEach page should start with\n---\ntitle: your title\n---\nand the first header will be the 2nd level, so ##. Note, there are situations where you leave off\n---\ntitle: your title\n---\nand start the qmd file with a level header #, but if using the default title yaml (in the --- fence) is a good habit since it makes it easy for Quarto convert your qmd file to other formats (like into a presentation)."
  },
  {
    "objectID": "content/add-content.html#add-your-pages-the-project",
    "href": "content/add-content.html#add-your-pages-the-project",
    "title": "Customize",
    "section": "Add your pages the project",
    "text": "Add your pages the project\n\nAdd the files to _quarto.yml"
  },
  {
    "objectID": "content/project_template.html",
    "href": "content/project_template.html",
    "title": "Porject template",
    "section": "",
    "text": "here its is the project. hope this works\nPhEpiGit provides a project_template repository that should be used each time a member creates a new repository. This template includes all the folders indicated in PhEpi-1-05_Reproduzierbares Arbeiten.",
    "crumbs": [
      "Project template"
    ]
  },
  {
    "objectID": "content/acceptpull.html",
    "href": "content/acceptpull.html",
    "title": "Checking and accepting a pull request",
    "section": "",
    "text": "The action of reviewing and accepting pull requests needs to be performed by the repository owner. Any (A) pull request can be viewed in the repository tabs, as illustrated in Figure 1. Once in the Pull request section, a list of requests is displayed, and various actions can be taken. Access a specific request by clicking on (B) the pull request name\n\n\n\n\n\n\nFigure 1: Checking a pull request on GitHub.\n\n\n\nFigure 2 shows an open pull request. This provides (A) information on the commit content and (B) request description. The owner and contributor can message around if clarifications are needed using (C) Add a comment section prior to (d) merge. After the pull request has been accepted and merged, the pull request status will change from Open to Merged. Additionally, the branch can be deleted if it is no longer needed.\n\n\n\n\n\n\nFigure 2: Description of an open pulling request.",
    "crumbs": [
      "Checking and accepting a pull request"
    ]
  },
  {
    "objectID": "content/new_repo.html",
    "href": "content/new_repo.html",
    "title": "Creating Your First Repository on PhEpiGit",
    "section": "",
    "text": "You can create a new repository using the command line, RStudio, or GitHub. However, we’ll focus on GitHub here because it helps us stick to our reproducible research SOP.\nOnce you’re part of the PhEpiGit, you have write permissions. That means you can clone, pull, and push to all our PhEpiGit repositories.\nTo set up a new GitHub repository:\n\nGo to the upper-right corner of the PhEpiGit and select +, then select New repository\n\n\n\n\n\n\n\nFigure 1: Create a new repository\n\n\n\n\n\n\nChoose the Pharmacoepidemiology-UKHD/project_template to initiate your new repository -A-. This selection will automatically assign the PhEpi as the owner. Next, assign a name to your repository -B- and select an appropriate visibility option -C-. You may also include a description if desired. Lastly, click Create repositry\n\n\n\n\n\n\n\nFigure 2: Create a new repository window\n\n\n\n\nFigure 3 shows a walkthrough of how a new repository takes shape. While GitHub enables repository management tasks, complete control can be achieved using a command line text editor or tools like RStudio. This document underscores utilising RStudio as a central element for effective GitHub repository management.\n\n\n\n\n\n\nFigure 3: New repository content based on PhEpi-1-05_Reproduzierbares Arbeiten\n\n\n\nThe next step is to clone your newly created GitHub repository to your local machine.",
    "crumbs": [
      "Creating Your First Repository"
    ]
  }
]